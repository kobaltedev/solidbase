diff --git a/dist/compiler/utils.d.ts b/dist/compiler/utils.d.ts
index 092b66ad5e9ca1f7968ed4ec0772157f79074c5b..e250808e7c702e3c6af20625974777437f9f3f76 100644
--- a/dist/compiler/utils.d.ts
+++ b/dist/compiler/utils.d.ts
@@ -2,6 +2,7 @@ import * as babel from '@babel/core';
 type DynamicImage = {
     element: babel.types.JSXElement;
     reactives: number;
+    imageOptions?: babel.types.ObjectExpression;
 };
 export declare const replaceDynamicImages: (t: typeof babel.types, path: babel.NodePath<babel.types.Program>) => DynamicImage[];
 export declare const extractAndReplaceReactives: (t: typeof babel.types, path: babel.NodePath<babel.types.JSXElement>) => babel.types.Expression[];
diff --git a/dist/compiler.js b/dist/compiler.js
index 61f1530addc360278431553a4d7eaaf9c61d3afb..2244a52b1dcfd7e2d55d75ca1767eb6ed1f7285c 100644
--- a/dist/compiler.js
+++ b/dist/compiler.js
@@ -13,18 +13,31 @@ var extractChild = (t, element) => {
     false
   );
 };
+var extractImageOptions = (element) => {
+  const index = element.openingElement.attributes.findIndex(
+    (a) => "name" in a && a.name.name === "imageOptions"
+  );
+  if (index === -1) return;
+  const attr = element.openingElement.attributes[index];
+  if (attr.type === "JSXSpreadAttribute" || attr.value?.type !== "JSXExpressionContainer" || attr.value.expression.type !== "ObjectExpression")
+    return;
+  element.openingElement.attributes.splice(index, 1);
+  return attr.value.expression;
+};
 var replaceDynamicImages = (t, path) => {
   const DynamicImages = [];
   const replaceDynamicImageVisitor = {
     JSXElement(elementPath) {
       const name = elementPath.node.openingElement.name;
       if (t.isJSXIdentifier(name) && name.name === "DynamicImage") {
+        const imageOptions = extractImageOptions(elementPath.node);
         const reactives = extractAndReplaceReactives(t, elementPath);
         const child = extractChild(t, elementPath.node);
         if (!child) throw new Error("DynamicImage must have a child element");
         DynamicImages.push({
           reactives: reactives.length,
-          element: t.cloneNode(child)
+          element: t.cloneNode(child),
+          imageOptions
         });
         elementPath.node.openingElement.selfClosing = true;
         elementPath.node.closingElement = null;
@@ -66,14 +79,14 @@ var addDynamicImages = (images, t, path) => {
   for (let i = 0; i < images.length; i++) {
     const image = images[i];
     const template2 = babel.template(
-      `const %%compName%% = (props)=>{
-      const img = (...args)=>{
+      `const %%serverFnName%% = (...args)=>{
           'use server';
           %%args%%
-          return createOpenGraphImage(%%jsx%%);
+          return createOpenGraphImage(%%jsx%%, %%imageOptions%%);
       };
+      const %%compName%% = (props)=>{
       const url = createMemo(()=>{
-          return img.url.replace("_server", "_server/") + \`&args=\${encodeURIComponent(JSON.stringify(props.values))}\`
+          return %%serverFnName%%.url.replace("_server", "_server/") + \`&args=\${encodeURIComponent(JSON.stringify(props.values))}\`
       });
       return url;
   };`,
@@ -89,8 +102,10 @@ var addDynamicImages = (images, t, path) => {
     babelUtils.pushStmts(
       template2({
         compName: `DynamicImage${i + 1}`,
+        serverFnName: `DynamicImage${i + 1}ServerFunction`,
         jsx: image.element,
-        args: argsDecl
+        args: argsDecl,
+        imageOptions: image.imageOptions
       }),
       path,
       true
diff --git a/dist/index.d.ts b/dist/index.d.ts
index c410b7a2d74f316cedce65eb8968a7dc67889d0f..2e599876cb14fd0a3033c9b7e302798de3886df3 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,6 +1,8 @@
 import type { JSX, JSXElement, ParentProps } from 'solid-js';
+import { ImageResponseNodeOptions } from '@vercel/og/dist/types';
 export declare const DynamicImage: (_props: {
     children: JSX.Element | (() => JSX.Element | Promise<JSX.Element>);
+    imageOptions?: ImageResponseNodeOptions;
 }) => JSX.Element;
 export declare const Image: (props: ParentProps) => JSX.Element;
 export declare const OpenGraph: (props: ParentProps & {
diff --git a/dist/unplugin.js b/dist/unplugin.js
index dde322e60898cbffca842def7c52fc764e5b7dc7..7da06cf50e29a4e9de79605a72ca0bff870c8493 100644
--- a/dist/unplugin.js
+++ b/dist/unplugin.js
@@ -17,18 +17,31 @@ var extractChild = (t, element) => {
     false
   );
 };
+var extractImageOptions = (element) => {
+  const index = element.openingElement.attributes.findIndex(
+    (a) => "name" in a && a.name.name === "imageOptions"
+  );
+  if (index === -1) return;
+  const attr = element.openingElement.attributes[index];
+  if (attr.type === "JSXSpreadAttribute" || attr.value?.type !== "JSXExpressionContainer" || attr.value.expression.type !== "ObjectExpression")
+    return;
+  element.openingElement.attributes.splice(index, 1);
+  return attr.value.expression;
+};
 var replaceDynamicImages = (t, path) => {
   const DynamicImages = [];
   const replaceDynamicImageVisitor = {
     JSXElement(elementPath) {
       const name = elementPath.node.openingElement.name;
       if (t.isJSXIdentifier(name) && name.name === "DynamicImage") {
+        const imageOptions = extractImageOptions(elementPath.node);
         const reactives = extractAndReplaceReactives(t, elementPath);
         const child = extractChild(t, elementPath.node);
         if (!child) throw new Error("DynamicImage must have a child element");
         DynamicImages.push({
           reactives: reactives.length,
-          element: t.cloneNode(child)
+          element: t.cloneNode(child),
+          imageOptions
         });
         elementPath.node.openingElement.selfClosing = true;
         elementPath.node.closingElement = null;
@@ -70,14 +83,14 @@ var addDynamicImages = (images, t, path) => {
   for (let i = 0; i < images.length; i++) {
     const image = images[i];
     const template2 = babel.template(
-      `const %%compName%% = (props)=>{
-      const img = (...args)=>{
+      `const %%serverFnName%% = (...args)=>{
           'use server';
           %%args%%
-          return createOpenGraphImage(%%jsx%%);
+          return createOpenGraphImage(%%jsx%%, %%imageOptions%%);
       };
+      const %%compName%% = (props)=>{
       const url = createMemo(()=>{
-          return img.url.replace("_server", "_server/") + \`&args=\${encodeURIComponent(JSON.stringify(props.values))}\`
+          return %%serverFnName%%.url.replace("_server", "_server/") + \`&args=\${encodeURIComponent(JSON.stringify(props.values))}\`
       });
       return url;
   };`,
@@ -93,8 +106,10 @@ var addDynamicImages = (images, t, path) => {
     babelUtils.pushStmts(
       template2({
         compName: `DynamicImage${i + 1}`,
+        serverFnName: `DynamicImage${i + 1}ServerFunction`,
         jsx: image.element,
-        args: argsDecl
+        args: argsDecl,
+        imageOptions: image.imageOptions
       }),
       path,
       true
